class Animal: 
    # Class attribute 
    is_living = True 
    # Method defined within the class 
    def speak(self): 
        return "This animal makes a sound" 
generic_animal = Animal() 
print(generic_animal.is_living) # Outputs: True 
print(generic_animal.speak()) # Outputs: This animal makes a sound 

----------------------------------------------
# Define the Car class 
class Car: 
    # Class attributes 
    color = 'White' 
    make = 'Generic Make' 
    @classmethod 
    def display_info(cls): 
        print(f"The car is a {cls.color} {cls.make}.") 

    @classmethod 
    def change_color(cls, new_color): 
        cls.color = new_color 

    @classmethod 
    def change_make(cls, new_make): 
        cls.make = new_make 
# Main interaction loop
while True: 
    # Display the menu options 
    print("\n1. Show car info") 
    print("2. Change car color") 
    print("3. Change car make") 
    print("4. Exit") 
    choice = input("Enter your choice: ") 
    if choice == '1': 
        # Display current car information 
        Car.display_info() 
    elif choice == '2':
        # Prompt for a new color and update the class attribute 
        new_color = input("Enter the new color for the car: ") 
        Car.change_color(new_color) 
        print("Car color updated.") 
    elif choice == '3': 
        # Prompt for a new make and update the class attribute 
        new_make = input("Enter the new make for the car: ") 
        Car.change_make(new_make) 
        print("Car make updated.") 
    elif choice == '4': 
        # Exit the program 
        print("Exiting program.") 
        break 
    else: 
        # Handle invalid menu options 
        print("Invalid choice. Please choose a valid option.")

------------------------------------------------
class Dog: 
    # Class attribute 
    species = 'Canine' 
    def __init__(self, name, age): 
        # Instance attributes 
        self.name = name 
        self.age = age 
my_dog = Dog("Buddy", 5) 
print(my_dog.species) 
# Accessing class attribute 
print(my_dog.name) # Accessing instance attribute 

---------------------------------------
class Dog: 
    def __init__(self, name, age): 
        self.name = name 
        self.age = age 
    # A simple method to describe the dog 
    def describe(self): 
        return f"{self.name} is {self.age} years old." 
    # Another method to simulate the dog making a sound 
    def speak(self, sound): 
        return f"{self.name} says {sound}"
my_dog = Dog("Buddy", 5) 
print(my_dog.describe()) # Outputs: Buddy is 5 years old. 
print(my_dog.speak("Woof")) # Outputs: Buddy says Woof 

---------------------------------------
class Dog: 
    def __init__(self, name, age): 
        self.name = name 
        self.age = age 
    def speak(self, sound): 
        return f"{self.name} says {sound}" 
    def birthday(self): 
        self.age += 1 # Updates the age attribute of the same object 
        return f"Happy {self.age}th Birthday, {self.name}!" 
my_dog = Dog("Buddy", 5) 
print(my_dog.birthday()) # Outputs: Happy 6th Birthday, Buddy!  

---------------------------------------
# Define the Book class 
class Book: 
    # Class attribute 
    library_name = "Local Library" 
    # Initialize class without constructor 
    books = [] 
    @classmethod 
    def add_book(cls, title, author): 
        cls.books.append({'title': title, 'author': author}) 
        print(f"Book added: {title} by {author}") 
    @classmethod 
    def remove_book(cls, title): 
        for book in cls.books: 
            if book['title'] == title: 
                cls.books.remove(book) 
                print(f"Book removed: {title}") 
                return print("Book not found.") 
    @classmethod 
    def display_books(cls): 
        if cls.books: 
            print("Listing all books:") 
            for book in cls.books: 
                print(f"{book['title']} by {book['author']}") 
        else:
            print("No books in the library.") 
# Main interaction loop 
while True: 
    print("\n1. Add a book") 
    print("2. Remove a book") 
    print("3. Show all books") 
    print("4. Exit") 
    choice = input("Enter your choice: ") 
    if choice == '1': 
        title = input("Enter the title of the book: ") 
        author = input("Enter the author of the book: ") 
        Book.add_book(title, author) 
    elif choice == '2': 
        title = input("Enter the title of the book to remove: ") 
        Book.remove_book(title) 
    elif choice == '3': 
        Book.display_books() 
    elif choice == '4': 
        print("Exiting program.") 
        break 
    else: 
        print("Invalid choice. Please choose a valid option.")

-----------------------------------------------------------
class Book: 
    def __init__(self, title, author): 
        self.title = title # Instance attribute for the book's title 
        self.author = author # Instance attribute for the book's author 
my_book = Book("1984", "George Orwell") 

------------------------------------------------------
class Car: 
    def __init__(self, make, model, year): 
        self.make = make 
        self.model = model 
        self.year = year 
    def display_info(self): 
        return f"{self.year} {self.make} {self.model}" 
# Creating an instance of Car 
my_car = Car("Toyota", "Corolla", 2021) 
print(my_car.display_info()) # Outputs: 2021 Toyota Corolla 

--------------------------------------------------
# Define the Participant class with a constructor 
class Participant: 
    def __init__(self, name, email): 
        self.name = name 
        self.email = email 
    def __str__(self): 
        return f"{self.name} ({self.email})" 
# Initialize the list of participants 
participants = [] 
# Main interaction loop 
while True: 
    print("\n1. Add a participant") 
    print("2. Remove a participant") 
    print("3. Show all participants") 
    print("4. Exit") 
    choice = input("Enter your choice: ") 
    if choice == '1': 
        name = input("Enter the participant's name: ") 
        email = input("Enter the participant's email: ") 
        participants.append(Participant(name, email)) 
        print("Participant added.") 
    elif choice == '2':
        email = input("Enter the email of the participant to remove: ") 
        found = False 
        for participant in participants: 
            if participant.email == email: 
                participants.remove(participant) 
                print("Participant removed.") 
                found = True 
                break 
        if not found: 
            print("Participant not found.") 
        elif choice == '3': 
            if participants: 
                print("Registered Participants:") 
                for participant in participants: 
                    print(participant) 
            else: print("No participants registered.") 
        elif choice == '4': 
            print("Exiting program.") 
            break 
        else: 
            print("Invalid choice. Please choose a valid option.") 

-----------------------------------------------------------------------
# Definition of classes for three everyday objects

# Class to represent a Chair with adjustable height
class Chair:
    # Constructor method to initialize a Chair object with material and initial height
    def __init__(self, material, height):
        self.material = material  # Material of the chair, e.g., leather
        self.height = height      # Height of the chair in centimeters

    # Method to adjust the chair's height
    def adjust_height(self, new_height):
        self.height = new_height  # Update the chair's height to new_height

# Class to represent a Phone with calling functionality
class Phone:
    # Constructor method to initialize a Phone object with brand and model
    def __init__(self, brand, model):
        self.brand = brand  # Brand of the phone, e.g., Apple
        self.model = model  # Model of the phone, e.g., iPhone 13

    # Method to simulate making a call to a phone number
    def make_call(self, number):
        print(f"Calling {number}...")  # Output message simulating a call

# Class to represent a Lamp with adjustable brightness
class Lamp:
    # Constructor method to initialize a Lamp object with color and initial brightness
    def __init__(self, color, brightness):
        self.color = color         # Color of the lamp, e.g., white
        self.brightness = brightness  # Brightness of the lamp in lumens

    # Method to adjust the lamp's brightness
    def change_brightness(self, new_brightness):
        self.brightness = new_brightness  # Update the lamp's brightness to new_brightness

# Test the code by creating and using objects of the above classes

# Creating an object of Chair with 'leather' material and initial height of 120 cm
office_chair = Chair('leather', 120)
# Adjusting the chair's height to 125 cm
office_chair.adjust_height(125)
# Printing the adjusted height of the chair
print(f"Adjusted chair height to {office_chair.height}cm")

# Creating an object of Phone with 'Apple' brand and 'iPhone 13' model
mobile_phone = Phone("Apple", "iPhone 13")
# Simulating a call to the number "1234567890"
mobile_phone.make_call("1234567890")

# Creating an object of Lamp with 'white' color and initial brightness of 75 lumens
study_lamp = Lamp("white", 75)
# Changing the lamp's brightness to 80 lumens
study_lamp.change_brightness(80)
# Printing the new brightness of the lamp
print(f"Lamp brightness set to {study_lamp.brightness}%")

-------------------------------------------------
# Define a class named CoffeeMachine to simulate the behavior of a coffee machine.
class CoffeeMachine:
    # Constructor method for initializing a new CoffeeMachine instance
    def __init__(self):
        self.__water_level = 100  # Private attribute to store the water level in the machine. Set to 100 units initially.

    # Method to make coffee with a specified strength
    def make_coffee(self, strength):
        # Check if the provided strength parameter is valid
        if strength not in ['light', 'medium', 'strong']:
            # If the strength is not one of the allowed values, inform the user.
            print("Invalid strength. Choose 'light', 'medium', or 'strong'.")
            return  # Exit the method if the strength is invalid.
        
        # Check if there is enough water to make coffee
        if self.__water_level > 10:
            self.__water_level -= 10  # Reduce the water level by 10 units to make a cup of coffee.
            # Inform the user that coffee is being made with the chosen strength.
            print(f"Making {strength} coffee.")
        else:
            # If there is not enough water to make coffee, inform the user to refill.
            print("Refill water.")

# Test the code by creating an instance of CoffeeMachine and making coffee.
machine = CoffeeMachine()  # Create an instance of CoffeeMachine named 'machine'.
machine.make_coffee('medium')  # Call the make_coffee method on the machine instance to make medium strength coffee.

-----------------------------------------------------
# Define a base class named Vehicle to represent general characteristics of vehicles.
class Vehicle:
    # Constructor method for initializing a new Vehicle instance with make and model
    def __init__(self, make, model):
        self.make = make  # Assign the make of the vehicle (e.g., Toyota, Trek)
        self.model = model  # Assign the model of the vehicle (e.g., Corolla, Marlin)

# Define a subclass named Car that inherits from Vehicle
class Car(Vehicle):
    # Constructor method for initializing a new Car instance
    def __init__(self, make, model):
        super().__init__(make, model)  # Call the constructor of the base class Vehicle
        self.num_wheels = 4  # Cars typically have 4 wheels, set this as a default attribute

# Define a subclass named Bike that also inherits from Vehicle
class Bike(Vehicle):
    # Constructor method for initializing a new Bike instance
    def __init__(self, make, model):
        super().__init__(make, model)  # Call the constructor of the base class Vehicle
        self.num_wheels = 2  # Bikes typically have 2 wheels, set this as a default attribute

# Test the code by creating instances of Car and Bike and displaying their details

# Create an instance of Car with make "Toyota" and model "Corolla"
my_car = Car("Toyota", "Corolla")
# Print out details about the car including make, model, and number of wheels
print(f"My car is a {my_car.make} {my_car.model} with {my_car.num_wheels} wheels.") 

# Create an instance of Bike with make "Trek" and model "Marlin"
my_bike = Bike("Trek", "Marlin")
# Print out details about the bike including make, model, and number of wheels
print(f"My bike is a {my_bike.make} {my_bike.model} with {my_bike.num_wheels} wheels.")

---------------------------------------------------------
# Define a base class named Animal with a generic method speak
class Animal:
    # Define a speak method that does nothing. This acts as a placeholder to be overridden in subclasses.
    def speak(self):
        pass

# Define a subclass named Dog that inherits from Animal
class Dog(Animal):
    # Override the speak method to return a string specific to dogs
    def speak(self):
        return "Bark!"

# Define a subclass named Cat that inherits from Animal
class Cat(Animal):
    # Override the speak method to return a string specific to cats
    def speak(self):
        return "Meow!"

# Define a subclass named Bird that inherits from Animal
class Bird(Animal):
    # Override the speak method to return a string specific to birds
    def speak(self):
        return "Tweet!"

# Test the code by creating a list of animal objects and invoking their speak method
animals = [Dog(), Cat(), Bird()]  # Create a list containing instances of Dog, Cat, and Bird
for animal in animals:
    print(animal.speak())  # Iterate through the list and print the output of the speak method for each animal

---------------------------------------------------------
# Define a class named MyClass
class MyClass:
    # Constructor method for initializing a new MyClass instance
    def __init__(self):
        self.message = "Hello, world!"  # Initialize an instance attribute with the greeting message

    # Method that returns the greeting message stored in the instance attribute
    def greet(self):
        return self.message

# Test the code by creating an instance of MyClass and using its greet method

# Create an instance of MyClass named 'my_object'
my_object = MyClass()
# Print the result of the greet method called on the my_object instance
print(my_object.greet())  # Outputs: "Hello, world!"

-----------------------------------------------------------
# Define a class named Book
class Book:
    # Constructor method to initialize a new Book instance with an author and a title
    def __init__(self, author, title):
        self.author = author  # Set the author attribute of the book
        self.title = title    # Set the title attribute of the book

    # Method to return a descriptive string that includes the book's title and author
    def description(self):
        return f"{self.title} by {self.author}"

# Test the code by creating an instance of Book and printing its description

# Create an instance of Book with "George Orwell" as the author and "1984" as the title
my_book = Book("George Orwell", "1984")
# Print the description of the book by calling the description method
print(my_book.description())  # Outputs: "1984 by George Orwell"

---------------------------------------------------------
# Define a class named Person to represent an individual's basic information
class Person:
    # Constructor method to initialize a new Person instance with a name and age
    def __init__(self, name, age):
        self.name = name  # Set the name attribute of the person
        self.age = age    # Set the age attribute of the person

    # Method to update the name attribute of the person
    def update_name(self, new_name):
        self.name = new_name  # Update the person's name with the new name provided

    # Method to update the age attribute of the person
    def update_age(self, new_age):
        self.age = new_age  # Update the person's age with the new age provided

    # Method to return a string that includes the person's name and age
    def display_info(self):
        return f"{self.name}, {self.age} years old"

# Test the code by creating an instance of Person and using its methods

# Create an instance of Person with the name "John Doe" and age 30
person = Person("John Doe", 30)
# Print the initial information of the person by calling the display_info method
print(person.display_info())  # Outputs: "John Doe, 30 years old"

# Update the name of the person instance to "Jane Doe"
person.update_name("Jane Doe")
# Update the age of the person instance to 31
person.update_age(31)
# Print the updated information of the person by calling the display_info method again
print(person.display_info())  # Outputs: "Jane Doe, 31 years old"

------------------------------------------------------
# Define a class named Rectangle to represent a rectangle's properties and operations
class Rectangle:
    # Constructor method to initialize a new Rectangle instance with length and breadth
    # Default values for length and breadth are set to 1
    def __init__(self, length=1, breadth=1):
        self.length = length  # Set the length attribute of the rectangle
        self.breadth = breadth  # Set the breadth attribute of the rectangle

    # Method to calculate and return the area of the rectangle
    def area(self):
        return self.length * self.breadth  # Multiply length by breadth to get the area

    # Method to calculate and return the perimeter of the rectangle
    def perimeter(self):
        return 2 * (self.length + self.breadth)  # Calculate perimeter using the formula 2*(length + breadth)

# Test the code by creating an instance of Rectangle and invoking its methods

# Create an instance of Rectangle with a length of 5 and a breadth of 3
rectangle = Rectangle(5, 3)
# Print the area of the rectangle by calling the area method
print(f"Area: {rectangle.area()}")  # Outputs: "Area: 15"
# Print the perimeter of the rectangle by calling the perimeter method
print(f"Perimeter: {rectangle.perimeter()}")  # Outputs: "Perimeter: 16"

--------------------------------------------------------------
# Define a class named Rectangle to represent the geometric shape rectangle
class Rectangle:
    # Constructor method to initialize a new Rectangle instance with optional parameters for length and breadth
    # Default values for length and breadth are set to 1
    def __init__(self, length=1, breadth=1):
        self.length = length  # Initialize the length attribute of the rectangle
        self.breadth = breadth  # Initialize the breadth attribute of the rectangle

    # Method to calculate and return the area of the rectangle
    def area(self):
        return self.length * self.breadth  # Area formula: length multiplied by breadth

    # Method to calculate and return the perimeter of the rectangle
    def perimeter(self):
        return 2 * (self.length + self.breadth)  # Perimeter formula: 2 times the sum of length and breadth

# Test the code by creating a default instance of Rectangle and invoking its methods

# Create a default instance of Rectangle with no arguments passed
default_rectangle = Rectangle()
# Print the area of the default rectangle by calling the area method
print(f"Default Area: {default_rectangle.area()}")  # Outputs: "Default Area: 1" due to default dimensions being 1x1
# Print the perimeter of the default rectangle by calling the perimeter method
print(f"Default Perimeter: {default_rectangle.perimeter()}")  # Outputs: "Default Perimeter: 4" calculated from the default dimensions

---------------------------------------------------------------
# Define a class named UserProfile to manage user profile information
class UserProfile:
    # Constructor method to initialize a new UserProfile instance with username, email, and optional location
    def __init__(self, username, email, location="Not specified"):
        self.username = username  # Store the username of the profile
        self.email = email        # Store the email address of the profile
        self.location = location  # Store the location, with a default of "Not specified"

    # Method to update the email address associated with the user profile
    def update_email(self, new_email):
        self.email = new_email  # Set the email attribute to the new email provided

    # Method to update the location associated with the user profile
    def update_location(self, new_location):
        self.location = new_location  # Set the location attribute to the new location provided

    # Method to return a formatted string that includes the user's profile information
    def display_profile(self):
        return f"Username: {self.username}, Email: {self.email}, Location: {self.location}"

# Test the code by creating an instance of UserProfile and using its methods

# Create an instance of UserProfile with a specific username and email
user_profile = UserProfile("john_doe", "john@example.com")
# Print the initial state of the user profile by calling the display_profile method
print(user_profile.display_profile())  # Outputs: "Username: john_doe, Email: john@example.com, Location: Not specified"

# Update the email address of the user profile instance
user_profile.update_email("new_john@example.com")
# Update the location of the user profile instance
user_profile.update_location("New York")
# Print the updated state of the user profile by calling the display_profile method again
print(user_profile.display_profile())  # Outputs: "Username: john_doe, Email: new_john@example.com, Location: New York"
