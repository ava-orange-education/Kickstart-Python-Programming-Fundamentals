Function AddNumbers: 
    Input: Number1, Number2 
    Process: Sum = Number1 + Number2 
        Output: Return Sum  

-----------------------------------
Function SayHello 
    Print "Hello, world!"
    EndFunction 

----------------------------------
Function SayHello: 
    Input: UserName 
    Process: Print "Hello, " + UserName 
        Output: None  

-------------------------------------
Function CalculateAreaOfCircle: 
    Input: Radius 
    Process: Area = π * Radius^2 
        Output: Return Area 

---------------------------------------
Function SendInvitations: 
    ... 
Function PrepareFood: 
    ... 
Function ArrangeMusic: 
    ...  
Call SendInvitations 
Call PrepareFood 
Call ArrangeMusic 

-----------------------------------
def function_name(): 
	# Body of the function 
	# Place the code to execute here 

---------------------------------
def greet(): 
    print("Hello, welcome to Python functions!") 

-------------------------------
def print_math_fact(): 
    print("Did you know? 0.1 + 0.2 != 0.3 in most programming languages due to floating-point arithmetic!") 

------------------------------------
def add_numbers(first_number, second_number): 
    print(first_number + second_number) 
add_numbers(5, 3) 

--------------------------------------
def introduce_yourself(name, age): 
    print(f"My name is {name}, and I am {age} years old.") 
introduce_yourself(age=30, name="Alex")

---------------------------------------
def create_profile(name, age, country="Unknown"): 
    print(f"Name: {name}, Age: {age}, Country: {country}") 
create_profile("Jamie", 25, country="Canada")  

------------------------------------------
def add_numbers(a, b): 
    result = a + b 
    return result  
When you call this function with two numbers as arguments, it calculates the sum and then returns this sum to the caller:
sum = add_numbers(5, 3) 
print(sum) # Outputs: 8 

--------------------------------------
def print_greeting(name): 
    print(f"Hello, {name}!")

-----------------------------------
def get_user_data(): 
    name = "Alice" 
    age = 30 
    return name, age 
# Returns a tuple (name, age) 
user_name, user_age = get_user_data() 
print(user_name, user_age) # Outputs: Alice 30

--------------------------------------
# Function definitions 
def add(a, b): 
    return a + b 
def subtract(a, b): 
    return a - b 
def multiply(a, b): 
    return a * b 
def divide(a, b): 
    if b != 0: 
        return a / b 
    else: 
        return "Error: Cannot divide by zero." 
# User input 
num1 = float(input("Enter the first number: ")) 
num2 = float(input("Enter the second number: ")) 
operation = input("Choose the operation (add, subtract, multiply, divide): ") 
# Operation selection and result calculation 
if operation == "add": 
    result = add(num1, num2) 
elif operation == "subtract": 
    result = subtract(num1, num2) 
elif operation == "multiply": 
    result = multiply(num1, num2) 
elif operation == "divide": 
    result = divide(num1, num2) 
else: 
    result = "Invalid operation selected." 
# Display the result 
print(f"Result: {result}")

-----------------------------------------
def greet(): 
    message = "Hello, Python!" 
# Local variable print(message) 
    greet() # Prints "Hello, Python!" 
print(message) # This would raise an error since 'message' is not accessible here. 

---------------------------------------------
user = "Alice" # Global variable 
def greet(): 
    print("Hello,", user) 
greet() # Prints "Hello, Alice" 

--------------------------------------------
counter = 0 # Global variable 
def increment_counter(): 
    global counter 
    counter += 1 # Modifies the global variable instead of creating a local one 
increment_counter() 
print(counter) # Prints "1" 

---------------------------------------------
# Global variable to track the highest score 
high_score = 0 
# Function to update the high score 
def update_high_score(new_score): 
    global high_score 
    if new_score > high_score: 
        high_score = new_score 
        print(f"New high score: {high_score}") 
    else: 
        print(f"Current high score remains: {high_score}") 
# Main loop to enter new scores 
while True: 
    score_input = input("Enter a new score (or type 'exit' to quit): ") 
    if score_input.lower() == 'exit': 
        print("Exiting. Final high score:", high_score) 
        break 
    else: 
        new_score = int(score_input) 
update_high_score(new_score) 

-------------------------------------------
def print_greeting(name="World"): 
    print(f"Hello, {name}!") 
print_greeting() # Outputs: Hello, World! 
print_greeting("Alice") # Outputs: Hello, Alice! 

-------------------------------------------
def describe_pet(name, *args, **kwargs): 
    print(f"Pet name: {name}") 
    for attribute in args: 
        print(f"- {attribute}") 
        for key, value in kwargs.items(): 
            print(f"- {key}: {value}") 
describe_pet("Fido", "dog", color="brown", age=5) 

---------------------------------------
def create_greeting_card(occasion="Birthday", recipient="Friend", *messages, **details): 
    print(f"Happy {occasion}, {recipient}!") 
    for message in messages: 
        print(f"- {message}") 
        for key, value in details.items(): 
            print(f"{key}: {value}") 
# Example function call 
create_greeting_card("Birthday", "Alice", "Wishing you all the best", 
                     "Here's to another great year!", sender="Bob", date="2024-04-01")

-------------------------------------------
def convert_temperature(temp, unit): 
    # This function converts temperatures between Celsius and Fahrenheit. 
    # temp: The temperature value you want to convert. 
    # unit: The unit of the input temperature ('C' for Celsius, 'F' for Fahrenheit). 
    if unit == "C": 
        return (temp * 9/5) + 32 # Formula to convert Celsius to Fahrenheit. 
    elif unit == "F": 
        return (temp - 32) * 5/9 # Formula to convert Fahrenheit to Celsius. 
    else: 
        return "Invalid unit" # If the unit isn't 'C' or 'F', return an error message. 
# Testing the function with a temperature in Celsius. 
print(convert_temperature(0, "C")) # Outputs 32, converting 0°C to Fahrenheit. 
# Testing the function with a temperature in Fahrenheit. 
print(convert_temperature(32, "F")) # Outputs 0, converting 32°F to Celsius. 

----------------------------------------------
def is_prime(number): 
    # Checks if a number is prime. 
    # A prime number is only divisible by 1 and itself, and must be greater than 1. 
    if number <= 1: 
        return False 
    # Numbers less than or equal to 1 are not prime. 
    for i in range(2, int(number**0.5) + 1): 
        # Loop from 2 to the square root of number, checking for factors. 
        if number % i == 0: 
            return False # If a factor is found, number is not prime. 
        return True # If no factors are found, number is prime. 

# Testing the function with a prime number. 
print(is_prime(11)) # Outputs True, indicating 11 is a prime number. 
# Testing the function with a non-prime number. 
print(is_prime(4)) # Outputs False, indicating 4 is not a prime number. 

-------------------------------------------------------
def repeat_string(s, n): 
    # Repeats the string 's' 'n' times. 
    # s: The string to repeat. 
    # n: The number of times to repeat the string. 
    return s * n # Multiplies the string 's' by 'n', effectively repeating it. 

# Repeating a simple greeting 3 times. 
print(repeat_string("Hi! ", 3)) # Outputs "Hi! Hi! Hi! " 
# Testing the function with an empty string and zero repetitions. 
print(repeat_string("", 5)) # Outputs an empty string. 
print(repeat_string("Python ", )) # Outputs an empty string, as the repeat count is 0. 

----------------------------------------------------------
def fibonacci(n): 
    # Generates the Fibonacci sequence up to the 'n'th number. 
    # n: The length of the Fibonacci sequence to generate. 
    if n <= 0: 
        return [] # If 'n' is 0 or negative, return an empty list. 
    elif n == 1: 
        return [0] # The sequence up to the first number is [0].
    sequence = [0, 1] 
    while len(sequence) < n: 
        # Append the sum of the last two numbers in the sequence to itself. 
        sequence.append(sequence[-1] + sequence[-2]) 
    return sequence 

# Generating the first 5 numbers of the Fibonacci sequence. 
print(fibonacci(5)) # Outputs [0, 1, 1, 2, 3] 
# Generating the Fibonacci sequence with 'n' as 1. 
print(fibonacci(1)) # Outputs [0]

---------------------------------
daily_steps = 0 
step_goal = 10000 
def track_daily_steps(steps): 
    # This function updates the global 'daily_steps' variable with the number of steps walked. 
    # steps: The number of steps to add to the daily total. 
    global daily_steps # Specifies that we're using the global variable 'daily_steps'. 
    # Add the new steps to the daily total. 
    daily_steps += steps 
    # Check if the daily step goal has been met or exceeded. 
    if daily_steps >= step_goal: 
        print("Congratulations! You've reached your daily step goal!") 
    else: 
        remaining = step_goal - daily_steps 
        print(f"Great job! You need {remaining} more steps to reach your daily goal.") 

# Simulating adding steps throughout the day. 
track_daily_steps(3000) # Outputs: "Great job! You need 7000 more steps to reach your daily goal." 
track_daily_steps(4500) # Outputs: "Great job! You need 2500 more steps to reach your daily goal." 
track_daily_steps(3000) # Outputs: "Congratulations! You've reached your daily step goal!" 

---------------------------------------
def identify_odd_even(num): 
    # This function determines whether a number is odd or even. 
    # num: The number to check. 
    # Use the modulo operator to check if the number is divisible by 2 without a remainder. 
    if num % 2 == 0: 
        print(f"{num} is Even.") # If true, the number is even. 
    else:
        print(f"{num} is Odd.") # If false, the number is odd. 

# Testing the function with an even number. 
identify_odd_even(10) # Outputs: "10 is Even." 
# Testing the function with an odd number. 
identify_odd_even(7) # Outputs: "7 is Odd."

---------------------------------
def calculate_factorial(n): 
    # This function calculates the factorial of a given number 'n'. 
    # n: A non-negative integer whose factorial is to be calculated. 
    if n < 0: 
        return "Error: Factorial of a negative number doesn't exist." 
    elif n == 0: 
        return 1 # The factorial of 0 is defined as 1. 
    else: 
        factorial = 1 
    for i in range(1, n + 1): 
        factorial *= i # Multiply 'factorial' by each number up to 'n'. 
    return factorial 

# Testing the function with various numbers. 
print(calculate_factorial(5)) # Outputs: 120, because 5! = 5*4*3*2*1 = 120 
print(calculate_factorial(0)) # Outputs: 1, as defined by the mathematical rule 0! = 1 
print(calculate_factorial(-1)) # Outputs: "Error: Factorial of a negative number doesn't exist." 
------------------------------------
